# name: 'Deploy Flask Static Site to AWS Amplify'

# on:
#   push:
#     branches:
#       - master  # Adjust to the branch you want to deploy from

# jobs:
#   deploy:
#     name: Deploy Flask Static Site to AWS Amplify
#     runs-on: ubuntu-latest

#     steps:
#     # Step 1: Checkout the repository
#     - name: Checkout Code
#       uses: actions/checkout@v2

#     # Step 2: Set up Python environment
#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.9'

#     # Step 3: Install dependencies and freeze Flask app
#     - name: Install Dependencies and Build Static Site
#       run: |
#         echo "Creating virtual environment and installing dependencies"
#         python -m venv venv
#         source venv/bin/activate
#         pip install --upgrade pip
#         pip install -r requirements.txt
#         echo "Freezing the Flask app"
#         python freeze.py  # Generates static files into the 'build' directory

# # Step 3: Deploy static site to Amplify Hosting using AWS CLI
#     - name: Deploy to AWS Amplify
#       run: |
#         aws amplify start-job \
#           --app-id d2a5heqc1vs1ae \
#           --branch-name master \
#           --job-type RELEASE \
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_REGION: us-east-1


# name: Deploy to Amplify

# on:
#   push:
#     branches:
#       - master  # Trigger the workflow on pushes to the main branch

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout Repository
#       uses: actions/checkout@v3

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: '3.9'  # Specify your Python version

#     - name: Install Dependencies
#       run: |
#         echo "Installing dependencies"
#         pip install --upgrade pip
#         pip install -r requirements.txt

#     - name: Build Static Site
#       run: |
#         echo "Freezing the Flask app"
#         python freeze.py  # Generate static files using Flask-Frozen

#     - name: Deploy to AWS Amplify
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: |
#         echo "Deploying to AWS Amplify"
#         npx amplify-app sync \
#           --app-id d2a5heqc1vs1ae \
#           --branch-name master \
#           --path build

name: 'Deploy Flask Static Site to AWS Amplify'


on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to set up'
        required: true
        type: string
      requirements-path:
        description: 'Path to the requirements.txt file'
        required: true
        type: string
      test-path:
        description: 'Path to the test file or directory'
        required: true
        type: string
      snyk-path: 
        description: 'Path to the test with snyk'
        required: true
        type: string 
      amplify_app_id:
        description: 'amplify app id'
        required: true
        type: string
      branch-name:
        description: 'branch we need to trigger the deployment'
        required: true
        type: string
      job-type:
        description: 'Type of the job. there are release,retry,manual'
        required: true
        type: string
      

    secrets:
      SNYK_TOKEN:
        description: 'Snyk token for vulnerability scanning'
        required: true
      AWS_ACCESS_KEY:
        description: 'AWS access key ID'
        required: true
      AWS_SECRET_KEY:
        description: 'AWS secret access key'
        required: true
      SONAR_TOKEN:
        description: 'sonar token for authentication'
        required: true
      SONAR_HOST_URL:
        description: 'sonarqube URL endpoint'
        required: true
      AWS_REGION:
        description: 'AWS region for ECR'
        required: true 

jobs:
# Lint test Stages
  lint_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python version
      uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python-version }}
    
    - name: Install dependencies
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r  ${{ inputs.requirements-path }}
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > flake8-report.txt || true
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics > flake8-report.txt || true

    - name: Upload Lint Report
      uses: actions/upload-artifact@v3
      with:
        name: lint-report
        path: flake8-report.txt



# Test Stage
  py_test:
    runs-on: ubuntu-latest
    needs: lint_test
    continue-on-error: true  # This will allow the job to continue even if it fails ( need to write proper test case)
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python version
      uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python-version }}
    
    - name: Install dependencies
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r ${{ inputs.requirements-path }}

    - name: Test with pytest and generate reports
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pytest ${{ inputs.test-path }} --cov=src --cov-report=xml --cov-report=html --junitxml=report.xml

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

    - name: Upload Test Report
      uses: actions/upload-artifact@v3
      with:
        name: junit-report
        path: report.xml


  # Security Scan Stage
  Snyk_scan:
    runs-on: ubuntu-latest
    continue-on-error: true 
    needs: [lint_test, py_test]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: code test
        args: --file=${{ inputs.snyk-path }} --sarif-file-output=snyk-python.sarif

    - name: Upload Snyk Python report
      uses: actions/upload-artifact@v3
      with:
        name: snyk-python-report
        path: snyk-python.sarif


  # Sonarqube stage
  Sonar_scan:
    runs-on: ubuntu-latest
    continue-on-error: true  # Please create sonar server while we are configuring and comment this stepp
    needs: [lint_test,  py_test, Snyk_scan ]
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4
      

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v2.0.2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}



  Deploy:
    runs-on: ubuntu-latest
    needs: [lint_test,  py_test, Snyk_scan, Sonar_scan ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to AWS Amplify
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        echo "Starting AWS Amplify Job..."
        aws amplify start-job \
          --app-id ${{ inputs.amplify_app_id }} \
          --branch-name ${{ inputs.branch-name }} \
          --job-type ${{ inputs.job-type }}
